{"version":3,"file":"static/js/90.599d8c5b.chunk.js","mappings":"+ZAKIA,EAAU,KAEd,IAEI,GAAU,OADVA,EAAMC,WACY,MAAM,IAAIC,MAAM,gBAQrC,CAPC,MAAOC,GACL,IAAMC,EAAS,IAAIC,EAAAA,GAAOC,EAAAA,GAC1BN,EAAK,WACDI,EAAOG,WAAW,+CAAgDF,EAAAA,GAAAA,OAAAA,sBAAqC,CACnGG,UAAW,mBAElB,CACJ,C,0SCLKJ,EAAS,IAAIC,EAAAA,GAAOC,EAAAA,GAiBtBG,EAAS,EA0BAC,EAAb,0CAaI,WAAYC,EAA6BC,GAAoB,wBAGzC,QAAZA,GACAR,EAAOG,WAAW,uDAAwDF,EAAAA,GAAAA,OAAAA,sBAAqC,CAC3GG,UAAW,iBAKf,EADgB,kBAATG,EACP,YAAMA,EAAKC,GAEX,YAAM,aAAcA,IAGnBC,kBAAoB,EAEzB,EAAKC,UAAW,EAEI,kBAATH,GACPI,EAAAA,EAAAA,KAAe,UAAM,aAAc,IAAId,EAAU,EAAKe,WAAWL,OAEjEI,EAAAA,EAAAA,KAAe,UAAM,aAAcJ,IAGvCI,EAAAA,EAAAA,KAAe,UAAM,YAAa,CAAC,IACnCA,EAAAA,EAAAA,KAAe,UAAM,QAAS,CAAC,IAC/BA,EAAAA,EAAAA,KAAe,UAAM,UAAW,CAAC,IACjCA,EAAAA,EAAAA,KAAe,UAAM,kBAAP,uEAGd,EAAKE,UAAUC,OAAS,WACpB,EAAKJ,UAAW,EAChBK,OAAOC,KAAK,EAAKC,WAAWC,SAAQ,SAACC,GACjC,EAAKN,UAAUO,KAAK,EAAKH,UAAUE,GAAIE,QAC1C,GACJ,EAED,EAAKR,UAAUS,UAAY,SAACC,GACxB,IAAMC,EAAOD,EAAaC,KACpBC,EAASC,KAAKC,MAAMH,GAC1B,GAAiB,MAAbC,EAAON,GAAY,CACnB,IAAMA,EAAKS,OAAOH,EAAON,IACnBU,EAAU,EAAKZ,UAAUE,GAG/B,UAFO,EAAKF,UAAUE,QAEAW,IAAlBL,EAAOA,OACPI,EAAQE,SAAS,KAAMN,EAAOA,QAE9B,EAAKO,KAAK,QAAS,CACfC,OAAQ,WACRJ,QAASH,KAAKC,MAAME,EAAQR,SAC5Ba,SAAUT,EAAOA,OACjBU,UAAU,gBAGX,CACH,IAAIpC,EAAe,KACf0B,EAAO1B,OACPA,EAAQ,IAAID,MAAM2B,EAAO1B,MAAMqC,SAAW,kBAC1CzB,EAAAA,EAAAA,IAAoBZ,EAAO,OAAQ0B,EAAO1B,MAAMsC,MAAQ,OACxD1B,EAAAA,EAAAA,IAAoBZ,EAAO,WAAYyB,IAEvCzB,EAAQ,IAAID,MAAM,iBAGtB+B,EAAQE,SAAShC,OAAO+B,GAExB,EAAKE,KAAK,QAAS,CACfC,OAAQ,WACRlC,MAAOA,EACP8B,QAASH,KAAKC,MAAME,EAAQR,SAC5Bc,UAAU,WAGjB,CAEJ,MAAM,GAAsB,qBAAlBV,EAAOa,OAA+B,CAE7C,IAAMC,EAAM,EAAKC,MAAMf,EAAOgB,OAAOC,cACjCH,GAEAA,EAAII,YAAYlB,EAAOgB,OAAOhB,OAGrC,MACGmB,QAAQC,KAAK,yBAEpB,EAKD,IAAMC,EAAWC,aAAY,WACzB,EAAKf,KAAK,OACb,GAAE,KA/FsD,OAgGrDc,EAASE,OAASF,EAASE,SAhG0B,SAiG5D,CA9GL,sCAkHI,WAAiC,OAAOC,KAAKC,UAAa,GAlH9D,2BAoHI,WACI,OAAOD,KAAKE,cACf,GAtHL,2BAwHI,WACI,OAAO,CACV,EA1HL,IAkII,SAAoBC,GAChBpD,EAAOG,WAAW,mDAAoDF,EAAAA,GAAAA,OAAAA,sBAAqC,CACvGG,UAAW,sBAElB,GAtIL,8BA4HI,SAAiBiD,GACbrD,EAAOG,WAAW,iDAAkDF,EAAAA,GAAAA,OAAAA,sBAAqC,CACrGG,UAAW,mBAElB,GAhIL,kBAwIU,W,wJACK,M,0CACV,GA1IL,mBA4II,SAAYgD,GACHA,GAELpD,EAAOG,WAAW,0CAA2CF,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9FG,UAAW,cAElB,GAlJL,kBAoJI,SAAKkC,EAAgBG,GAAmB,WAC9Ba,EAAMjD,IAEZ,OAAO,IAAIkD,SAAQ,SAACC,EAASC,GAMzB,IAAMpC,EAAUK,KAAKgC,UAAU,CAC3BpB,OAAQA,EACRG,OAAQA,EACRtB,GAAImC,EACJK,QAAS,QAGb,EAAK3B,KAAK,QAAS,CACfC,OAAQ,UACRJ,QAASH,KAAKC,MAAMN,GACpBc,SAAU,IAGd,EAAKlB,UAAUW,OAAO0B,IAAQ,CAAEvB,SAlBhC,SAAkBhC,EAAc0B,GAC5B,OAAI1B,EAAgB0D,EAAO1D,GACpByD,EAAQ/B,EAClB,EAeyCJ,QAAAA,GAEtC,EAAKX,UAAY,EAAKG,UAAUO,KAAKC,EAC5C,GACJ,GA9KL,wBAoLU,SAAWuC,EAAaC,EAAmBlB,G,8IAQ/B,OANM,OADhBmB,EAAeb,KAAKc,QAAQH,MAE5BE,EAAeP,QAAQS,IAAIH,GAAOI,MAAK,SAACJ,GACpC,OAAO,EAAKzC,KAAK,gBAAiByC,EACrC,IACDZ,KAAKc,QAAQH,GAAOE,G,SAEJA,E,OAAdI,EAAQ,EAARA,KACNjB,KAAKT,MAAM0B,GAAS,CAAEN,IAAAA,EAAKjB,YAAAA,G,+CAC9B,GA9LL,yBAgMI,SAAYwB,GAAY,WACpB,OAAQA,EAAMC,MACV,IAAK,QACDnB,KAAKoB,WAAW,QAAS,CAAE,aAAc,SAAC5C,GACtC,IAAM4B,EAAciB,EAAAA,GAAAA,KAAe7C,EAAO8C,QAAQC,WAClD,EAAKC,SAASC,MAAQrB,EACtB,EAAKrB,KAAK,QAASqB,EACtB,IACD,MAEJ,IAAK,UACDJ,KAAKoB,WAAW,UAAW,CAAE,2BAA4B,SAAC5C,GACtD,EAAKO,KAAK,UAAWP,EACxB,IACD,MAEJ,IAAK,SACDwB,KAAKoB,WAAWF,EAAMP,IAAK,CAAE,OAAQX,KAAK0B,WAAWR,EAAMS,UAAW,SAACnD,GAC7C,MAAlBA,EAAOoD,UAAmBpD,EAAOoD,SAAU,GAC/C,EAAK7C,KAAKmC,EAAMS,OAAQ,EAAKE,UAAUC,UAAUtD,GACpD,IACD,MAEJ,IAAK,KACD,IAAMuD,EAAc,SAACb,GACjB,IAAMc,EAAOd,EAAMc,KACnB,EAAKC,sBAAsBD,GAAMhB,MAAK,SAACkB,GAC9BA,GACL,EAAKnD,KAAKiD,EAAME,EACnB,GACJ,EAGDH,EAAYb,GAMZlB,KAAKoB,WAAW,KAAM,CAAE,aAAc,SAAC5C,GACnC,EAAK2D,QAAQR,QAAO,SAACS,GAAD,MAAmB,OAAXA,EAAEjB,IAAV,IAA0BlD,QAAQ8D,EACzD,IACD,MAIJ,IAAK,QACL,IAAK,OACL,IAAK,WACL,IAAK,UACL,IAAK,QACD,MAEJ,QACIpC,QAAQ0C,IAAI,aAAcnB,GAGrC,GAzPL,wBA2PI,SAAWA,GAAY,WACfP,EAAMO,EAAMP,IAEhB,GAAmB,OAAfO,EAAMC,KAAe,CAErB,GAAInB,KAAKmC,QAAQR,QAAO,SAACS,GAAD,MAAmB,OAAXA,EAAEjB,IAAV,IAA0BmB,OAC9C,OAEJ3B,EAAM,IACT,MAAM,GAAIX,KAAKuC,cAAcrB,EAAMA,OAEhC,OAGJ,IAAMD,EAAQjB,KAAKc,QAAQH,GACtBM,WAECjB,KAAKc,QAAQH,GACpBM,EAAMD,MAAK,SAACC,GACF,EAAK1B,MAAM0B,YACT,EAAK1B,MAAM0B,GAClB,EAAK9C,KAAK,kBAAmB,CAAE8C,IAClC,IACJ,GAlRL,qBAoRU,W,6IAEEjB,KAAKpC,UAAU4E,aAAe5F,EAAAA,WAAoB6F,C,eAClD,O,SAAO,IAAInC,SAAQ,SAACC,GAChB,EAAK3C,UAAUC,OAAS,WACpB0C,GAAQ,EACX,EAED,EAAK3C,UAAU8E,QAAU,WACrBnC,GAAQ,EACX,CACJ,I,OAKLP,KAAKpC,UAAU+E,MAAM,K,+CACxB,IArSL,yBAgLI,WACI,MAAO,qBACV,KAlLL,GAAuCC,EAAAA,G,+BCyB1BC,EAAAA,WAGX,WAA6B3D,IAAkC,eAAlC,KAAQA,SAARA,EADrB,KAAiB4D,kBAbC,GAcyC,C,kDAU7D,SACJC,EACAC,EACAC,G,kJAGsB,OADtBC,EAAiBH,G,SACW/C,KAAKmD,iB,UAA3BC,EAAgB,EAAhBA,KACNF,EAAiBH,GAIY,IAAzBC,EAAcV,OAAW,C,wCACpBtC,KAAKqD,qBACVC,KAAKC,IAAIN,EAAiBG,EAAgBpD,KAAK8C,mBAAqB,EACpEM,EAAgB,I,UAOdI,GAAsBC,EAAAA,EAAAA,GAC1BT,EAAcA,EAAcV,OAAS,GAAGhB,QAEpCoC,EAAiBN,EAAgBpD,KAAK8C,kBAAoB,IAC5DU,GAAuBE,GAAAA,C,yCAClB1D,KAAKqD,qBAAqBK,EAAgBN,EAAgB,I,QAK/B,O,UAAMpD,KAAK2D,cAC7CZ,EACAC,G,QAGyC,OALrCY,EAAAA,EAAAA,KAINV,EAAiBH,G,UACgC/C,KAAKqD,qBACpDG,EAAsB,EACtBJ,EAAgB,G,eAFZS,EAAAA,EAAAA,KAINX,EAAiBH,G,oCACNa,IAAAA,EAAAA,EAAAA,GAAeC,K,gDAC3B,G,6BAUK,SACJd,EACApB,EACAmC,EACAb,G,sJAGsB,OADtBC,EAAiBH,G,SACW/C,KAAKmD,iB,UAA3BC,EAAgB,EAAhBA,KACNF,EAAiBH,GAIW,IAAxBe,EAAaxB,OAAW,C,wCACnBtC,KAAK+D,eACVpC,EACA2B,KAAKC,IAAIN,EAAiBG,EAAgBpD,KAAK8C,mBAAqB,EACpEM,EAAgB,I,UAOdI,GAAsBC,EAAAA,EAAAA,GAC1BK,EAAaA,EAAaxB,OAAS,GAAGlC,aAElCsD,EAAiBN,EAAgBpD,KAAK8C,kBAAoB,IAC5DU,EAAsBE,GAAAA,C,yCACjB1D,KAAK+D,eAAepC,EAAQ+B,EAAgBN,EAAgB,I,QAK9C,O,UAAMpD,KAAKgE,kBAChCjB,EACAe,G,QAgBc,OAlBVG,EAAiB,EAAjBA,KAINf,EAAiBH,GAIXmB,EAAcJ,EACjBnC,QAAO,SAAAU,GAAG,OAAIoB,EAAAA,EAAAA,GAAQpB,EAAIjC,aAAe6D,EAAe7D,WAA9C,IACV+D,KAAI,SAAA9B,GAAG,OAAIvE,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,EAAMuE,GAAG,CAAET,SAAS,GAAxB,IAIJwC,EACJH,EAAe7D,cAAgBiE,OAAOC,mBAClCb,EAAAA,EAAAA,GAAQK,EAAa,GAAG1D,aACxB6D,EAAe7D,Y,UACCJ,KAAK+D,eACzBpC,EACAyC,EACAhB,EAAgB,G,eAIlBmB,GAPIA,EAAY,EAAZA,MAOkB5C,QACpB,SAAAU,GAAG,OACDA,KACCoB,EAAAA,EAAAA,GAAQpB,EAAIjC,aAAe6D,EAAe7D,cACzCqD,EAAAA,EAAAA,GAAQpB,EAAImC,UAAYP,EAAeO,SAHxC,IAMLtB,EAAiBH,G,oCACNmB,IAAAA,EAAAA,EAAAA,GAAgBK,K,gDAC5B,G,iCAOD,SAAoBE,GAClBzE,KAAK8C,kBAAoB2B,CAC1B,G,4BAOa,W,0IACmB,O,SAAMzE,KAAKd,SAASf,KAAK,mB,cAAlDuG,EAAAA,EAAAA,K,mBACCjB,EAAAA,EAAAA,GAAQiB,I,+CAChB,G,kCASa,SACZN,EACAO,G,qJAEIP,GAAsBO,GAAAA,C,wCACjB,I,OAGT,IADMC,EAA0B,GACvBC,EAAIT,EAAoBS,EAAIF,EAAkBE,IACrDD,EAAWE,KAAK,CACdzF,OAAQ,uBACRG,OAAQ,EAACuF,EAAAA,EAAAA,GAAMF,IAAI,KAMG,O,SAAM7E,KAAKd,SAAS8F,UAAUJ,G,cAAlDK,EAAoB,EAApBA,KACAC,EAAaD,EAAkBE,QACnC,SAACC,EAAKC,GAAN,OAAgBD,EAAIE,OAAOD,EAA3B,GACA,I,kBAEKH,EAAWf,IAAIoB,I,+CACvB,G,2BAOa,SACZxC,EACAC,G,gJAEMxE,EAA0B,GAGvBqG,EAAI7B,EAAcV,OAAS,E,YAAGuC,GAAK,I,gBAExB,OADZW,EAAWxC,EAAc6B,G,SACP7E,KAAKyF,kBAAiBhC,EAAAA,EAAAA,GAAQ+B,EAASlE,S,UAAzDoE,EAAY,EAAZA,KACNxC,EAAiBH,GAGbyC,EAASxD,OAAS0D,EAAU1D,KAAAA,C,oDAIhCxD,EAAOsG,KAAKS,EAAgBG,I,QAViBb,I,gDAYxCrG,EAAOmH,W,gDACf,G,8BAQa,SAAiBvF,G,6JACtBJ,KAAKd,SAASf,KAAK,uBAAwB,EAChD4G,EAAAA,EAAAA,GAAM3E,IACN,K,+CAEH,G,+BAYa,SACZ2C,EACAe,G,8IAIgB,O,SAAM9D,KAAKyF,kBACzBhC,EAAAA,EAAAA,GAAQK,EAAaA,EAAaxB,OAAS,GAAGlC,c,OAD5CsF,EAAY,EAAZA,KAGJxC,EAAiBH,GACR8B,EAAIf,EAAaxB,OAAS,E,YAAGuC,GAAK,I,oBACnCe,EAAS9B,EAAae,IAIjBzE,cAAgBsF,EAAUpE,OAAAA,C,gBACvB,O,UAAMtB,KAAKyF,kBAAiBhC,EAAAA,EAAAA,GAAQmC,EAAOxF,c,QAAvDsF,EAAY,EAAZA,K,WAKEE,EAAOC,YAAcH,EAAU1D,KAAAA,C,yCAC1B,CACL5B,aAAaqD,EAAAA,EAAAA,GAAQmC,EAAOxF,aAC5BoE,UAAUf,EAAAA,EAAAA,GAAQmC,EAAOpB,Y,QAdeK,I,gDAkBvC,CACLzE,YAAaiE,OAAOC,kBACpBE,SAAUH,OAAOC,oB,gDAEpB,G,4BAOiB,SAChB3C,EACAyC,EACAO,G,+IAEIP,GAAsBO,GAAAA,C,wCACjB,I,cAEHmB,EAAWhI,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,EACZ6D,GAAM,CACToE,WAAWhB,EAAAA,EAAAA,GAAMX,GACjB4B,SAASjB,EAAAA,EAAAA,GAAMJ,EAAmB,K,kBAE7B3E,KAAKd,SAASf,KAAK,cAAe,CAAC2H,K,+CAC3C,K,EAhSUjD,GAmSb,SAAS0C,EAAgBU,GACvB,IAAMzH,EAAM,iBAA4CyH,GAIxD,cAHOzH,EAAO0H,uBACP1H,EAAO2H,oBACP3H,EAAO4H,OACP5H,CACR,CAEK,SAAU6H,EAAeC,GAC7B,OAAOC,EAAOD,GAAQ,SAAApF,GAAK,OAAIA,EAAMc,IAAV,GAC5B,CAEK,SAAUwE,EAAWF,GACzB,OAAOC,EAAOD,GAAQ,SAAApF,GAAK,gBAAOA,EAAM2E,UAAb,YAA0B3E,EAAMsD,SAAhC,GAC5B,CAED,SAAS+B,EAAUE,EAAYC,GAC7B,IAAMC,EAAqB,IAAIC,IACzBpI,EAAc,GAQpB,OAPAiI,EAAMxI,SAAQ,SAAA4I,GACZ,IAAMC,EAAMJ,EAAOG,GACdF,EAASI,IAAID,KAChBH,EAASK,IAAIF,GACbtI,EAAOsG,KAAK+B,GAEf,IACMrI,CACR,CAED,IAAMyI,EAAY,IAAIpK,MAAM,aACtB,SAAUqG,EAAiBH,GAC/B,GAAIA,IACF,MAAMkE,CAEV,CCtYO,IAAMC,EACX,+BAuIWC,EAAAA,SAAAA,I,gIAKX,WACE,IAAMC,EAAQpH,KAAKW,IAAI0G,MAAM,KAC7B,GAAID,EAAM,KAAOF,EAGjB,OAAIE,EAAM,IAAmB,MAAbA,EAAM,GACbE,EAAwBF,EAAM,SAErC,CAEH,G,qBAMD,WACE,IAAMA,EAAQpH,KAAKW,IAAI0G,MAAM,KAC7B,GAAID,EAAM,KAAOF,EAGjB,OAAIE,EAAM,IAAmB,MAAbA,EAAM,GACbE,EAAwBF,EAAM,SAErC,CAEH,G,sBAMD,WACE,IAAMA,EAAQpH,KAAKW,IAAI0G,MAAM,KAC7B,GAAID,EAAM,KAAOF,EAGjB,OAAIE,EAAM,IAAmB,MAAbA,EAAM,GACA,SAAbA,EAAM,QAEb,CAEH,K,EA/CUD,CAxEAI,WAQX,WAAY5G,EAAa6G,EAAoBC,IAAa,eACxDzH,KAAKwH,SAAWA,EAChBxH,KAAKW,IAAMA,EACXX,KAAKyH,KAAOA,EACZzH,KAAK0H,kBAAoB,EACzB1H,KAAK2H,WAAY,CAClB,C,kCAED,WACE,OAAQ3H,KAAKmB,MACX,IAAK,KACH,OAAOnB,KAAKgC,KACd,IAAK,SACH,OAAOhC,KAAK2B,OACd,QACE,OAAO3B,KAAKW,IAEjB,G,gBAED,WACE,OAAOX,KAAKW,IAAI0G,MAAM,KAAK,EAC5B,G,gBAED,WACE,IAAMD,EAAQpH,KAAKW,IAAI0G,MAAM,KAC7B,GAAiB,OAAbD,EAAM,GACR,MAAM,IAAIvK,MAAM,2BAElB,OAAOuK,EAAM,EACd,G,kBAED,WACE,IAAMA,EAAQpH,KAAKW,IAAI0G,MAAM,KAC7B,GAAiB,WAAbD,EAAM,GACR,MAAM,IAAIvK,MAAM,2BAElB,IAAM+K,EAAUR,EAAM,GAEhBS,EAqFV,SAA2BtJ,GACzB,GAAa,KAATA,EACF,MAAO,GAGT,OAAOA,EAAK8I,MAAM,MAAMlD,KAAI,SAAA2D,GAC1B,GAAc,KAAVA,EACF,MAAO,GAGT,IAAMV,EAAQU,EAAMT,MAAM,KAAKlD,KAAI,SAAA2D,GACjC,MAAiB,SAAVA,EAAmB,KAAOA,CAClC,IAED,OAAwB,IAAjBV,EAAM9E,OAAe8E,EAAM,GAAKA,CACxC,GACF,CArGkBW,CAAkBX,EAAM,IACjCzF,EAAiB,CAAC,EASxB,OAPIkG,EAAOvF,OAAS,IAClBX,EAAOkG,OAASA,GAEdD,GAAuB,MAAZA,IACbjG,EAAOiG,QAAUA,GAGZjG,CACR,G,sBAED,WAEE,OAAO3B,KAAKW,IAAIqH,QAAQ,MAAQ,GADT,CAAC,QAAS,UAAW,UAAW,QACHA,QAAQhI,KAAKW,MAAQ,CAC1E,K,EA9DU4G,IAqJb,SAASD,EAAwB/I,GAC/B,GAAa,KAATA,EAAJ,CAIA,IAAM0J,EAAY1J,EAAK8I,MAAM,KAC7B,OAA4B,IAArBY,EAAU3F,OAAe2F,EAAU,GAAKA,CAH9C,CAIH,CC1LA,IAwBaC,EAAAA,SAAAA,I,6BA0BX,WAAYC,EAAuBC,GAAmB,M,GAAA,eAEpD,IAAMC,EAASC,EAAAA,gBAAAA,UAA0BH,EAAOE,QAG1CE,EAAiBD,EAAAA,gBAAAA,kBAAkCH,EAAO5K,SAC1DI,EAAa2K,EAAAA,gBAAAA,yBACjBC,EACAF,EACA,OAGIG,EAAW,eAAH,OAAkBC,EAAAA,GAG1BC,EAAK,IAAIC,EAAAA,EAA0B,QAAV,EAAAR,EAAO7K,WAAGsL,IAAAA,EAAAA,EAAIjL,EAAWL,IAAKkL,EAAU,CACrEJ,cAAe,OAAAA,QAAa,IAAbA,EAAAA,EAk1BE,qBAAZS,GACI,MAAXA,GACoB,MAApBA,EAAQC,UACiB,MAAzBD,EAAQC,SAASC,KARUC,EAAAA,OAAAA,aAAoCpM,YAv0BzDqM,EAAgBC,EAAAA,EAAcX,GAtBgB,OAuBpD,cAAMG,EAAWO,IA7CZ9G,QAAuB,GAUb,EAAAgH,yBACf,IAAIC,IAEW,EAAAC,uBAA8C,IAAID,IA8Z3D,EAAAE,cAAgB,SAACpI,GACvB,IAAM/B,EAA4BV,KAAKC,MAAMwC,EAAM3C,MACnD,GA4hBJ,SACEY,GAEA,OAZF,SACEA,GAEA,OACEoK,MAAMC,QAAQrK,IACO,QAApBA,EAAQuB,cAAyD7B,IAAnCM,EAA4BjB,EAE9D,CAKSuL,CAAWtK,EACpB,CAhiBQuK,CAAoBvK,GAAzB,CAGA,IAAMwK,EAAaxK,EAAQK,OAAOC,aAC5BmK,EAAY,EAAKP,uBAAuBQ,IAAIF,GAClD,GAAKC,EAAL,CAGA,IAAMnK,EAAe,EAAK0J,yBAAyBU,IAAID,GACvD,GAA4B,kBAAxBnK,EAAaJ,OAIjB,OAAQI,EAAaD,OAAO,IAC1B,IAAK,WACH,IAAMsK,EAAuBrK,EACvBsK,EAAkB5K,EAChB6K,EAAkCF,EAAlCE,cAAeC,EAAmBH,EAAnBG,eACfzL,EAAWuL,EAAgBvK,OAA3BhB,OACJwL,EA+gBZ,SACEE,EACAhJ,GAEAiJ,EAAsBD,EAAYhJ,EAAOkJ,EAC1C,CAnhBSC,CAA0BJ,EAAgBzL,GACjCmL,IAAeC,EAGxB,EAAKU,qBAAqBV,EAAWpL,EAAQ4L,GAG7C,EAAKG,cAAcX,EAAWpL,EAAQ4L,GAExC,MAEF,IAAK,OACH,IAAMI,EAAmB/K,EACnBgL,EAActL,EACZ6K,EAAkCQ,EAAlCR,cAAeC,EAAmBO,EAAnBP,eACfzL,EAAWiM,EAAYjL,OAAvBhB,OACJwL,EAqgBZ,SACEE,EACAhJ,GAEAiJ,EAAsBD,EAAYhJ,EAAOwJ,EAC1C,CAzgBSC,CAAsBV,EAAgBzL,GAC7BoL,IAAcD,EACvB,EAAKW,qBAAqBV,EAAWpL,EAAQkM,GAE7C,EAAKH,cAAcX,EAAWpL,EAAQkM,GAlC3C,CALA,CA8CF,EAaO,EAAYE,aAAG,WACrB,EAAKvB,uBAAuBwB,QAC5B,MA0ZJ,WACE,IAAIC,GAAY,EAChB,MAAO,CAAEC,OAAQ,kBAAOD,GAAY,CAAnB,EAA0B/H,YAAa,kBAAM+H,CAAN,EACzD,CA7ZmCE,GAAxBD,EAAR,EAAQA,OAAQhI,EAAhB,EAAgBA,YAChB,EAAKkI,eAAiBF,EAHI,gBAIC,EAAK5B,yBAAyB+B,UAJ/B,yBAIfzL,EAJe,SAKP0L,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,QAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,sEAEb,OAFa,kBAEPnL,KAAKoL,uBAAuBrI,EAAatD,GAFlC,sDAIRsD,KACHpD,QAAQ7C,MAAR,mCAC8B2C,EAAaD,OAAO,GADlD,qDALW,uDALO,EAI1B,IAAK,EAAL,qBAAmE,GAJzC,+BAkB1B,EAAK6L,gBACN,EAuFO,EAAwBC,yBAAG,WACD,MAA5B,EAAKC,sBACPC,cAAc,EAAKD,qBACnB,EAAKA,yBAAsB1M,GAE7B,EAAKoM,gBACN,EA5iBC,EAAK5C,OAASA,EAGd,EAAKoD,WAAa,IAAI5I,GAAJ,WAClB,EAAK6I,qBACL,EAAKL,iBACL,EAAKJ,eAAiBU,EAAAA,EA9B8B,CA+BrD,C,iCA6BD,SAAGC,EAA6BpE,GAC9B,OAAOxH,KAAK6L,kBAAkBD,EAAWpE,GAAU,EACpD,G,kBAaD,SAAKoE,EAA6BpE,GAChC,OAAOxH,KAAK6L,kBAAkBD,EAAWpE,GAAU,EACpD,G,iBAWD,SAAIoE,EAA6BpE,GAC/B,OAAIsE,EAAeF,GACV5L,KAAK+L,KAAKH,EAAWpE,IAErB,kDAAUoE,EAAWpE,EAE/B,G,gCAUD,SAAmBoE,GACjB,YAAkB/M,IAAd+M,GAA2BE,EAAeF,GACrC5L,KAAKgM,oBAAoBJ,IAEzB,iEAAyBA,EAEnC,G,2BAUD,SAAcA,GACZ,YAAkB/M,IAAd+M,GAA2BE,EAAeF,GACrC5L,KAAKiM,eAAeL,IAEpB,4DAAoBA,EAE9B,G,uBAUD,SAAUA,GACR,YAAkB/M,IAAd+M,GAA2BE,EAAeF,GACrC5L,KAAKkM,WAAWN,IAEhB,wDAAgBA,EAE1B,G,+BASD,SACEA,EACApE,EACAC,GAEA,GAAIqE,EAAeF,GAAY,CAC7B,IAAM1K,EAAQ,IAAIiG,EAChBgF,EAAmBP,GACnBpE,EACAC,GAIF,OAFAzH,KAAKmC,QAAQ2C,KAAK5D,GAClBlB,KAAKoM,YAAYlL,GACVlB,IACR,CACC,OAAO,gEAAwB4L,EAAWpE,EAAUC,EAEvD,G,yBAUD,SAAYvG,GAEe,CACvBgG,EACA,QACA,UAEmBmF,SAASnL,EAAMC,MAClCnB,KAAKsM,iBAAiBpL,IAEtB,0DAAkBA,EAErB,G,wBAUK,SACJP,EACAC,EACAlB,EACAwB,G,uJAK4B,OAHxBL,EAAeb,KAAKc,QAAQH,G,SAGEX,KAAKmD,iB,OASzB,OATRoJ,EAAsB,EAAtBA,KAGc,MAAhB1L,IACFA,EAAeP,QAAQS,IAAIH,GAAOI,MAAK,SAAAJ,GACrC,OAAO,EAAKzC,KAAK,gBAAiByC,EACnC,IACDZ,KAAKc,QAAQH,GAAOE,G,SAEFA,E,OAGG,OAHjBI,EAAQ,EAARA,K,UAGuBX,QAAQS,IAAIH,G,QAAnC4L,EAAiB,EAAjBA,KACNxM,KAAKmJ,yBAAyBsD,IAAIxL,EAAO,CACvCC,MAAOA,EACP7B,OAAQ,gBACRG,OAAQgN,EACRD,oBAAAA,EACA3C,UAAW3I,EACX0I,WAAY1I,EACZyL,WAAY,GACZ1C,eAAe,EACfC,eAAgB,KAElBjK,KAAKqJ,uBAAuBoD,IAAIxL,EAAOA,GAIvCjB,KAAKT,MAAM0B,GAAS,CAAEN,IAAAA,EAAKjB,YAAAA,G,gDAC5B,G,kBAeD,SAAKkM,GAAgD,QAiC5C,EAjC4C,0BAAhBe,EAAgB,iCAAhBA,EAAgB,kBACnD,GAAIb,EAAeF,GAAY,CAC7B,IAAIpN,GAAS,EAEPoO,EAA8B,GAG9BC,EAAWV,EAAmBP,GAyBpC,OAvBA5L,KAAKmC,QAAUnC,KAAKmC,QAAQR,QAAO,SAAAT,GACjC,OAAIA,EAAMP,MAAQkM,IAIlBC,YAAW,WACT5L,EAAMsG,SAASuF,MAAM,EAAMJ,EAC5B,GAAE,GAEHnO,GAAS,GAEL0C,EAAMuG,OACRmF,EAAQ9H,KAAK5D,IACN,GAIV,IAED0L,EAAQ3O,SAAQ,SAAAiD,GACd,EAAK8L,WAAW9L,EACjB,IAEM1C,CACR,CACC,uEAAkBoN,GAAlB,OAAgCe,GAEnC,G,uBAGK,SAAUM,G,gJAWG,OAVbC,EAAS,EACP9O,EAA4B6O,EAAM9I,KAAI,YAC1C,MAAO,CACL9E,OAF+D,EAApBA,OAG3CG,OAH+D,EAAZA,OAInDkB,QAAS,MACTxC,GAAI,eAAF,OAAiBgP,KAEtB,I,SAEsBlN,KAAKmN,sBAAsB/O,G,UAA5Ca,EAAW,EAAXA,OACAmO,EAAgBnO,EAASoO,MAAK,SAAAC,GAAC,QAAMA,EAAExQ,KAAR,KAClB,C,qBACX,IAAID,MAAMuQ,EAActQ,MAAOqC,S,gCAGhCF,EACJsO,MAAK,SAACC,EAAIC,GAAL,OAAaD,EAAGtP,GAAiBuP,EAAGvP,EAApC,IACLiG,KAAI,SAAAmJ,GAAC,OAAIA,EAAE9O,MAAN,K,+CACT,G,qBAGD,WAGE,OAFAwB,KAAK0N,wBACL1N,KAAKsL,4BACE,sDACR,G,iCAQD,WACE,OAAOtL,KAAKqI,SAAWsF,EAAAA,CACxB,G,wBAaD,SAAWzM,GAAkB,WACvBP,EAAMO,EAAMP,IAGhB,GAAIO,EAAMC,OAAS+F,GAEjB,GACElH,KAAKmC,QAAQR,QACX,SAAAS,GAAC,OAAIA,EAAEjB,OAAS+F,CAAf,IACD5E,OAEF,YAGG,GAAmB,OAAfpB,EAAMC,KAAe,CAE9B,GAAInB,KAAKmC,QAAQR,QAAO,SAAAS,GAAC,MAAe,OAAXA,EAAEjB,IAAN,IAAqBmB,OAC5C,OAEF3B,EAAM,IACP,MAAM,GAAIX,KAAKuC,cAAcrB,EAAMA,OAElC,OAGF,IAAMD,EAAQjB,KAAKc,QAAQH,GACtBM,WAIEjB,KAAKc,QAAQH,GACfM,EAAMD,MAAK,SAAAC,GACT,EAAK1B,MAAM0B,YAGT,EAAK1B,MAAM0B,GACb,EAAK9C,KAAK,kBAAmB,CAAC8C,IACpC,IACF,G,gCAGO,WACNjB,KAAKC,WAAW2N,iBAAiB,UAAW5N,KAAKsJ,eACjDtJ,KAAKC,WAAW2N,iBAAiB,SAAU5N,KAAK4K,cAChD5K,KAAKC,WAAW2N,iBAAiB,OAAQ5N,KAAKsL,yBAC/C,G,mCAGO,WACNtL,KAAKC,WAAW4N,oBAAoB,UAAW7N,KAAKsJ,eACpDtJ,KAAKC,WAAW4N,oBAAoB,SAAU7N,KAAK4K,cACnD5K,KAAKC,WAAW4N,oBAAoB,OAAQ7N,KAAKsL,yBAClD,G,oCAsGa,SACZvI,EACAtD,G,mKAaqB,OAVnBmK,EAMEnK,EANFmK,UACAvK,EAKEI,EALFJ,OACAG,EAIEC,EAJFD,OACAkN,EAGEjN,EAHFiN,WACAzC,EAEExK,EAFFwK,eACAsC,EACE9M,EADF8M,oBAEF9M,EAAauK,eAAgB,EAC7BC,EAAe3H,OAAS,E,kBAEGtC,KAAK7B,KAAKkB,EAAQG,G,OAArCmK,EAAa,EAAbA,KACNzG,EAAiBH,GACjBtD,EAAakK,WAAaA,EAC1B3J,KAAKqJ,uBAAuBoD,IAAI9C,EAAYC,G,KACpCpK,EAAO,G,OACR,a,KAAA,GAmBA,SAnBA,KAmBA,M,cAlBoB,O,UAAMsO,GAC3B,kBACEC,EACE,EAAKtC,WAAWuC,oBACdjL,EACA2J,EACAH,GA3jBO,IAsjBb,GArjBa,GA+jBb,kBAAOxJ,GAAP,I,eAXIkL,EAAiB,EAAjBA,KAaN/K,EAAiBH,GACFsD,EAAe,GAAD,eAAK4H,IAAL,OAAwBhE,KAC9ChM,SAAQ,SAAAiD,GAAK,OAAI,EAAKgN,kBAAkBtE,EAAW1I,EAAtC,I,6BAKG,OADjBS,EAAiCnC,EAAO,IAAM,CAAC,E,UACxBsO,GAC3B,kBACEC,EACE,EAAKtC,WAAW0C,gBACdpL,EACApB,EACA+K,EACAH,GAhlBO,IA0kBb,GAzkBa,GAolBb,kBAAOxJ,GAAP,I,eAZIkL,EAAAA,EAAAA,KAcN/K,EAAiBH,GACFyD,EAAW,GAAD,eAAKyH,IAAL,OAAwBhE,KAC1ChM,SAAQ,SAAAiD,GAAK,OAAI,EAAKkN,cAAcxE,EAAW1I,EAAlC,I,kFAOxBzB,EAAauK,eAAgB,EAC7BC,EAAe3H,OAAS,E,0EAE3B,G,+BAoBO,SAAkBsH,EAAmBpL,GAC3CwB,KAAKsK,qBAAqBV,EAAWpL,EAAQ4L,EAC9C,G,2BAGO,SAAcR,EAAmBpL,GACvCwB,KAAKsK,qBAAqBV,EAAWpL,EAAQkM,EAC9C,G,kCASO,SACNd,EACApL,EACA2E,GAEAnD,KAAKuK,cAAcX,EAAWpL,EAAQ2E,GAEtC,IAAM1D,EAAeO,KAAKmJ,yBAAyBU,IAAID,GAClDnK,GAGLO,KAAKqO,iBAAiB5O,EAAcjB,EACrC,G,2BAGO,SACNoL,EACApL,EACA2E,GAEA,IAAM1D,EAAeO,KAAKmJ,yBAAyBU,IAAID,GAClDnK,GAML0K,EACE1K,EAAaiN,WAAU5O,OAAAA,OAAAA,CAAAA,EAClBU,GACL2E,EAEH,G,8BAGO,SACN1D,EACAjB,GAEqBwB,KAAKsO,cAAc7O,EAAayB,MACrDqN,CAAa/P,EACd,G,4BAQO,WAAc,WACY,MAA5BwB,KAAKuL,sBAGTvL,KAAKuL,oBAAsBzL,aAAY,kBAAWqL,EAAAA,EAAAA,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,sEAE9C,OAF8C,kBAExC4C,EAAY/N,KAAK7B,KAAK,eA/rBR,KA6rB0B,sDAI9C6B,KAAKC,WAAWuO,YAJ8B,uDAAX,GA9rBhB,KAqsBxB,G,mCAYa,SACZpQ,G,wKAEOkC,QAAQS,IAAI3C,EAAQ+F,KAAI,SAAAsK,GAAG,OAAI,EAAKtQ,KAAKsQ,EAAIpP,OAAQoP,EAAIjP,OAA9B,M,0CACnC,G,8BAGO,SAAiB0B,GACvB,GAAIA,EAAMC,OAAS+F,EAAyC,CAC1D,IAAQwH,EAAuCxN,EAAvCwN,YAAaC,EAA0BzN,EAA1ByN,UAAWC,EAAe1N,EAAf0N,WAC3B5O,KAAKoB,WACRF,EAAMP,IACN,CAAC,8BAA+B,CAAE+N,YAAAA,EAAaC,UAAAA,EAAWC,WAAAA,IAC1D5O,KAAKsO,cAAcpN,GACnBA,EAEH,KAAyB,UAAfA,EAAMC,KACVnB,KAAKoB,WACR,QACA,CAAC,YACDpB,KAAKsO,cAAcpN,GACnBA,GAEsB,WAAfA,EAAMC,MACVnB,KAAKoB,WACRF,EAAMP,IACN,CAAC,OAAQX,KAAK0B,WAAWR,EAAMS,SAC/B3B,KAAKsO,cAAcpN,GACnBA,EAGL,G,2BAGO,SAAcA,GAAkB,WACtC,OAAQA,EAAMC,MACZ,KAAK+F,EACH,IAAQwH,EAAuCxN,EAAvCwN,YAAaC,EAA0BzN,EAA1ByN,UAAWC,EAAe1N,EAAf0N,WAChC,OAAO,SAAApQ,GAAM,OACX,EAAKO,KACH,CACEM,OAAQ,8BACRqP,YAAAA,EACAC,UAAAA,EACAC,WAAAA,GAEFpQ,EARS,EAUf,IAAK,QACH,OAAO,SAAAA,GACL,IAAM4B,EAAciB,EAAAA,GAAAA,KAAe7C,EAAO8C,QAAQC,WAClD,EAAKC,SAASC,MAAQrB,EACtB,EAAKrB,KAAK,QAASqB,EACpB,EACH,IAAK,SACH,OAAO,SAAA5B,GACiB,MAAlBA,EAAOoD,UACTpD,EAAOoD,SAAU,GAEnB,EAAK7C,KAAKmC,EAAMS,OAAQ,EAAKE,UAAUC,UAAUtD,GAClD,EACH,QACE,MAAM,IAAI3B,MAAM,2CAErB,G,kBAcO,SAAK+O,EAA6BpE,GAAmB,WAC3D,GAAgB,MAAZA,EACF,OAAOxH,KAAK6O,mBAAmBjD,GAGjC,IAAMgB,EAA8B,GAEhCkC,GAAQ,EACNjC,EAAWV,EAAmBP,GAiBpC,OAhBA5L,KAAKmC,QAAUnC,KAAKmC,QAAQR,QAAO,SAAAT,GACjC,OAAIA,EAAMP,MAAQkM,GAAY3L,EAAMsG,UAAYA,MAG5CsH,IAGJA,GAAQ,EACRlC,EAAQ9H,KAAK5D,IACN,GACR,IAED0L,EAAQ3O,SAAQ,SAAAiD,GACd,EAAK8L,WAAW9L,EACjB,IAEMlB,IACR,G,iCAcO,SAAoB4L,GAA2B,WACjDgB,EAA8B,GAClC,GAAiB,MAAbhB,EACFgB,EAAU5M,KAAKmC,QAEfnC,KAAKmC,QAAU,OACV,CACL,IAAM0K,EAAWV,EAAmBP,GACpC5L,KAAKmC,QAAUnC,KAAKmC,QAAQR,QAAO,SAAAT,GACjC,OAAIA,EAAMP,MAAQkM,IAGlBD,EAAQ9H,KAAK5D,IACN,EACR,GACF,CAMD,OAJA0L,EAAQ3O,SAAQ,SAAAiD,GACd,EAAK8L,WAAW9L,EACjB,IAEMlB,IACR,G,4BAcO,SAAe4L,GACrB,IAAKA,EACH,OAAO5L,KAAKmC,QAAQG,OAGtB,IAAMuK,EAAWV,EAAmBP,GACpC,OAAO5L,KAAKmC,QAAQR,QAAO,SAAAT,GACzB,OAAOA,EAAMP,MAAQkM,CACtB,IAAEvK,MACJ,G,wBAcO,SAAWsJ,GACjB,GAAiB,MAAbA,EACF,OAAO5L,KAAKmC,QAAQgC,KAAI,SAAAjD,GAAK,OAAIA,EAAMsG,QAAV,IAG/B,IAAMqF,EAAWV,EAAmBP,GACpC,OAAO5L,KAAKmC,QACTR,QAAO,SAAAT,GAAK,OAAIA,EAAMP,MAAQkM,CAAlB,IACZ1I,KAAI,SAAAjD,GAAK,OAAIA,EAAMsG,QAAV,GACb,I,yBA/yBD,SAAkBjK,GAChB,MAAuB,kBAAZA,GAAwBA,KAAWwR,EAAAA,EACrCA,EAAAA,EAAexR,IAIjByR,EAAAA,EAAAA,GAAqBzR,EAC7B,K,EA3EU2K,CACH7K,GAm5BV,SAAeyQ,EACbmB,EACAC,GACqD,IAArDC,EAAqD,uDAAV,kBAAM,CAAN,E,4IAEvCC,EAAe,EACfvK,EAAI,E,OAGG,O,kBAAMoK,I,+EAEbpK,GACSqK,IAAeC,EAAY,EAAD,K,mCAGnC,O,UAAME,EAAMD,G,WACPD,EAAY,EAAD,K,mCAGhBC,EACmB,IAAjBA,EAxBgB,IA0BZ9L,KAAKgM,IAxBO,IADK,EAyBgCF,G,+EAG5D,CAED,SAASC,EAAME,GACb,OAAO,IAAIjP,SAAQ,SAAAC,GAAO,OAAIuM,WAAWvM,EAASgP,EAAxB,GAC3B,CAED,SAASxB,EAAeyB,EAAqBD,GAC3C,OAAOjP,QAAQmP,KAAK,CAClBD,EACA,IAAIlP,SAAW,SAACoP,EAAGlP,GAAJ,OACbsM,YAAW,kBAAMtM,EAAO,IAAI3D,MAAM,WAAvB,GAAoC0S,EADlC,KAIlB,CAED,SAASnF,EAAuBlJ,GAC9B,OAAOuC,EAAAA,EAAAA,GAAQvC,EAAMI,OACtB,CAED,SAASoJ,EAAmBxJ,GAC1B,OAAOuC,EAAAA,EAAAA,GAAQvC,EAAMd,YACtB,CAmCD,SAAS+J,EACPD,EACAhJ,EACAiC,GAEA,IAAMwM,EAAqBxM,EAAejC,GAGpC0O,EAAiB1F,EAAW2F,WAChC,SAAAzN,GAAC,OAAIe,EAAef,GAAKuN,EAx/BM,EAw/B9B,KAEqB,IAApBC,EACF1F,EAAW5H,OAAS,EAEpB4H,EAAW4F,OAAO,EAAGF,GAEvB1F,EAAWpF,KAAK5D,EACjB,CAED,SAAS4K,EACP5K,GAEA,MAAwB,kBAAVA,GAAsB,WAAYA,CACjD,CAyBK,SAAUiL,EAAmBjL,GACjC,IAAK4K,EAAe5K,GAClB,MAAM,IAAIrE,MAAM,uCAElB,IA0B6BkT,EAvB7B,MACE7I,gCAJkB8I,EAAsB9O,EAAMwN,aAO9C,IANgBsB,EAAsB9O,EAAMyN,WAQ5C,UAkBY9P,KADekR,EAxBY7O,EAAM0N,YA0BtC,IAEAmB,EAAME,WAlBhB,CAED,SAASD,EACPD,GAEA,YAAclR,IAAVkR,EACK,IACExG,MAAMC,QAAQuG,GAChBA,EAAMG,KAAK,KAEXH,CAEV,C,oBC1nCD,IAAII,EAAgB,WACnB,GAAoB,kBAATC,MAAqBA,KAAM,OAAOA,KAC7C,GAAsB,kBAAXC,QAAuBA,OAAQ,OAAOA,OACjD,MAAM,IAAIxT,MAAM,kCAChB,EAEDyT,EAAOC,QAAW,WACjB,GAAIvQ,KAAM,OAAOA,KAKjB,GAA0B,kBAAfwQ,YAA2BA,WAAY,OAAOA,WAKzD,IACC1S,OAAO2S,eAAe3S,OAAO4S,UAAW,aAAc,CACrD7G,IAAK,WAAc,OAAO7J,IAAO,EACjC2Q,cAAc,GAMf,CAJC,MAAO7T,GAGR,OAAOqT,GACP,CACD,IAEC,OAAKS,YAAmBT,GAIxB,CAND,eAKQrS,OAAO4S,UAAUE,UACxB,CACD,CA5BiB,E,mCCsBlB,IAKA,aAkDI,WACoBtT,EAChBuT,EACAC,GAYA,QAZA,IAAAA,IAAAA,EAAAA,CAAAA,GAFgB,KAAAxT,IAAAA,EAjCb,KAAAyT,QAAgD,KAChD,KAAArO,QAA2C,KAC3C,KAAArE,UAAoD,KACpD,KAAAR,OAA0C,KAC1C,KAAAmT,OAA2D,KAC3D,KAAAC,SAA4C,KACnC,KAAAxO,WAAakG,EAAgBlG,WAC7B,KAAAyO,KAAOvI,EAAgBuI,KACvB,KAAAC,QAAUxI,EAAgBwI,QAC1B,KAAAC,OAASzI,EAAgByI,OAKjC,KAAAC,eAAgB,EAChB,KAAAC,UAAW,EACX,KAAAC,cAAuB,GACvB,KAAAC,cAAwB,EACxB,KAAAC,eAAiB,EAIjB,KAAAC,oBAAsB,GACtB,KAAAC,kBAAoB,GACX,KAAAC,UAAgC,CAAC,EAcpB,MAAtBf,GAC8B,kBAAvBA,GACPtH,MAAMC,QAAQqH,GAEd7Q,KAAK6R,UAAYhB,EAEjBC,EAAUD,EAEd7Q,KAAK8Q,QAAUgB,EAAoBhB,IAC9B9Q,KAAK8Q,QAAQ1I,cAAe,CAC7B,GAAyB,qBAAdxL,UAGP,MAAM,IAAIC,MACN,mFAHJmD,KAAK8Q,QAAQ1I,cAAgBxL,SAOpC,CACDoD,KAAK+R,kBACR,CAkXL,OAhXIjU,OAAAA,eAAW6K,EAAAA,UAAA,aAAU,C,IAArB,WACI,OAAO3I,KAAKgS,oBAAsB,MACrC,E,IAED,SAAsBC,GAClBjS,KAAKgS,mBAAqBC,EACtBjS,KAAK0I,KACL1I,KAAK0I,GAAGuJ,WAAaA,EAE5B,E,gCAEDnU,OAAAA,eAAW6K,EAAAA,UAAA,iBAAc,C,IAAzB,WACI,IAAIuJ,EAAMlS,KAAK0I,GAAK1I,KAAK0I,GAAGyJ,eAAiB,EACzCC,GAAmB,EAevB,OAdApS,KAAKuR,cAActT,SAAQ,SAAAM,GACvB,IAAM8T,EA+WlB,SAA2B9T,GACvB,MAAoB,kBAATA,EAEA,EAAIA,EAAK+D,OACT/D,aAAgB+T,YAChB/T,EAAK8T,WACL9T,aAAgBgU,KAChBhU,EAAKiU,UAEZ,CAEP,CA1X8BC,CAAkBlU,GACnB,MAAd8T,EACAH,GAAOG,EAEPD,GAAmB,CAE1B,IACGA,GACApS,KAAK0S,SACD,yGAIDR,CACV,E,gCAEDpU,OAAAA,eAAW6K,EAAAA,UAAA,aAAU,C,IAArB,WACI,OAAO3I,KAAK0I,GAAK1I,KAAK0I,GAAGiK,WAAa3S,KAAK0R,mBAC9C,E,gCAED5T,OAAAA,eAAW6K,EAAAA,UAAA,WAAQ,C,IAAnB,WACI,OAAO3I,KAAK0I,GAAK1I,KAAK0I,GAAGF,SAAWxI,KAAK2R,iBAC5C,E,gCAED7T,OAAAA,eAAW6K,EAAAA,UAAA,aAAU,C,IAArB,WACI,OAAO3I,KAAKsR,SAAW3I,EAAgByI,OAASzI,EAAgBuI,IACnE,E,gCAEMvI,EAAAA,UAAAA,MAAP,SAAavJ,EAAewT,GACxB5S,KAAK6S,cAAczT,EAAMwT,GACzB5S,KAAK8S,WACL9S,KAAK0S,SAAS,0CACjB,EAEM/J,EAAAA,UAAAA,KAAP,SAAYpK,GACR,GAAIyB,KAAKsR,SACL,MAAM,IAAIzU,MAAM,oDACTmD,KAAK0I,IAAM1I,KAAK0I,GAAGlG,aAAexC,KAAKkR,KAC9ClR,KAAK0I,GAAGvK,KAAKI,GAEbyB,KAAKuR,cAAczM,KAAKvG,EAE/B,EAEMoK,EAAAA,UAAAA,UAAP,WACI,GAAI3I,KAAKsR,SACL,MAAM,IAAIzU,MACN,kEAGRmD,KAAK6S,cAAc,IAAM,+BACzB7S,KAAK+S,iBAAYlU,EACpB,EAUM8J,EAAAA,UAAAA,iBAAP,SACIxH,EACAqG,GAEKxH,KAAK4R,UAAUzQ,KAChBnB,KAAK4R,UAAUzQ,GAAQ,IAE3BnB,KAAK4R,UAAUzQ,GAAM2D,KAAK0C,EAC7B,EAEMmB,EAAAA,UAAAA,cAAP,SAAqBzH,GACjB,OAAOlB,KAAKgT,oBAAoB9R,EAAMC,KAAMD,EAC/C,EAUMyH,EAAAA,UAAAA,oBAAP,SACIxH,EACAqG,GAEIxH,KAAK4R,UAAUzQ,KACfnB,KAAK4R,UAAUzQ,GAAQnB,KAAK4R,UAAUzQ,GAAMQ,QACxC,SAAAsR,GAAK,OAAAA,IAAMzL,CAAQ,IAG9B,EAEOmB,EAAAA,UAAAA,iBAAR,sBACI,IAAI3I,KAAKsR,SAAT,CAGM,mBAAE4B,EAAAA,EAAAA,eAAgB9K,EAAAA,EAAAA,cACxBpI,KAAK0S,SAAS,4BAA4B1S,KAAK1C,IAAG,KAClD,IAAMoL,EAAgB,IAAIN,EAAcpI,KAAK1C,IAAK0C,KAAK6R,WACvDnJ,EAAGqI,QAAU,SAAA7P,GAAS,SAAK6R,YAAY7R,EAAM,EAC7CwH,EAAGhG,QAAU,SAAAxB,GAAS,SAAKiS,YAAYjS,EAAM,EAC7CwH,EAAGrK,UAAY,SAAA6C,GAAS,SAAKoI,cAAcpI,EAAM,EACjDwH,EAAG7K,OAAS,SAAAqD,GAAS,SAAKkS,WAAWlS,EAAM,EAC3ClB,KAAKqT,iBAAmBvG,YAAW,WAG/BwG,EAAKC,sBACLD,EAAKT,gBACLS,EAAKP,iBAAYlU,EACpB,GAAEqU,GACHlT,KAAK0I,GAAKA,CAfT,CAgBJ,EAEOC,EAAAA,UAAAA,WAAR,SAAmBzH,GAAnB,WACI,GAAKlB,KAAK0I,KAAM1I,KAAKsR,SAArB,CAGQ,IAAAkC,EAAA,aAAAA,kBACRxT,KAAK0S,SAAS,qBACiB,MAA3B1S,KAAKgS,mBACLhS,KAAK0I,GAAGuJ,WAAajS,KAAKgS,mBAE1BhS,KAAKgS,mBAAqBhS,KAAK0I,GAAGuJ,WAEtCjS,KAAKuT,sBACDvT,KAAKqR,cACLrR,KAAKgT,oBAAoB,SAAU9R,IAEnClB,KAAKgT,oBAAoB,OAAQ9R,GACjClB,KAAKqR,eAAgB,GAEzBrR,KAAKuR,cAActT,SAAQ,SAAAkB,GAAW,SAAKhB,KAAKgB,EAAQ,IACxDa,KAAKuR,cAAgB,GACrBvR,KAAKyT,kBAAoB3G,YAAW,WAChCwG,EAAKI,uBACLJ,EAAK9B,cAAgB,EACrB8B,EAAK7B,eAAiB,EACtB,IAAMkC,EAAYH,EAAoB,IAAQ,EAC9CF,EAAKZ,SACD,+BAA+BiB,EAA/B,4CAGP,GAAEH,EA1BF,CA2BJ,EAEO7K,EAAAA,UAAAA,cAAR,SAAsBzH,GACdlB,KAAKsR,UAGTtR,KAAKgT,oBAAoB,UAAW9R,EACvC,EAEOyH,EAAAA,UAAAA,YAAR,SAAoBzH,GAApB,WACI,IAAIlB,KAAKsR,SAAT,CAGM,mBAAEsC,EAAAA,EAAAA,qBAAsBC,EAAAA,EAAAA,gBAS9B,GARA7T,KAAKuT,sBACLvT,KAAK0T,uBACD1T,KAAK0I,KACL1I,KAAK0R,oBAAsB1R,KAAK0I,GAAGiK,WACnC3S,KAAK2R,kBAAoB3R,KAAK0I,GAAGF,SACjCxI,KAAK6S,iBAET7S,KAAKgT,oBAAoB,OAAQ9R,GAC7BlB,KAAKyR,gBAAkBmC,EACvB5T,KAAK8T,iBACD5S,EACAlB,KAAK+T,yCAHb,CAOA,IAAMC,GAAiB9S,GAAS2S,EAAgB3S,GACnB,mBAAlB8S,EACPhU,KAAKiU,oBACDD,EACA9S,EApRZ,mEAwRQ8S,EAAchT,MAAK,SAAAkT,GACXZ,EAAKhC,UAGTgC,EAAKW,oBACDC,EACAhT,EA5RhB,qEA+RS,GAlBJ,CAhBA,CAoCJ,EAEOyH,EAAAA,UAAAA,YAAR,SAAoBzH,GAChBlB,KAAKgT,oBAAoB,QAAS9R,GAClClB,KAAK0S,SAAS,kCACjB,EAEO/J,EAAAA,UAAAA,oBAAR,SACIqL,EACA9S,EACAiT,GAEIH,EACAhU,KAAKoU,wBAELpU,KAAK8T,iBAAiB5S,EAAOiT,EAEpC,EAEOxL,EAAAA,UAAAA,sBAAR,sBACU,eACF0L,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,uBAEJvU,KAAKyR,iBACL,IAAM+C,EAAYxU,KAAKwR,cACvBxR,KAAKwR,cAAgBlO,KAAKC,IACtB8Q,EACA/Q,KAAKgM,IACDtP,KAAKwR,cAAgB+C,EACrBD,IAGRxH,YAAW,WAAM,SAAKiF,kBAAkB,GAAEyC,GAC1C,IAAMC,EAAoBD,EAAY,IAAQ,EAC9CxU,KAAK0S,SACD,uCAAuC+B,EAAgB,YAE9D,EAEO9L,EAAAA,UAAAA,iBAAR,SACIzH,EACAwT,GAEA1U,KAAK0S,SAASgC,GACd1U,KAAK8S,WACD5R,GACAlB,KAAKgT,oBAAoB,QAAS9R,EAEzC,EAEOyH,EAAAA,UAAAA,SAAR,WACI3I,KAAKsR,UAAW,EAChBtR,KAAK2U,mBACL3U,KAAKuR,cAAgB,GACrBvR,KAAK6S,eACR,EAEOlK,EAAAA,UAAAA,cAAR,SAAsBiM,EAAoBhC,GACjC5S,KAAK0I,KAMV1I,KAAK0I,GAAGhG,QAAUiJ,EAClB3L,KAAK0I,GAAGqI,QAAUpF,EAClB3L,KAAK0I,GAAGrK,UAAYsN,EACpB3L,KAAK0I,GAAG7K,OAAS8N,EACjB3L,KAAK0I,GAAG/F,MAAMiS,EAAWhC,GACzB5S,KAAK0I,QAAK7J,EACb,EAEO8J,EAAAA,UAAAA,iBAAR,WACI3I,KAAKuT,sBACLvT,KAAK0T,sBACR,EAEO/K,EAAAA,UAAAA,oBAAR,WACiC,MAAzB3I,KAAKqT,mBACLwB,aAAa7U,KAAKqT,kBAClBrT,KAAKqT,sBAAmBxU,EAE/B,EAEO8J,EAAAA,UAAAA,qBAAR,WACkC,MAA1B3I,KAAKyT,oBACLoB,aAAa7U,KAAKyT,mBAClBzT,KAAKyT,uBAAoB5U,EAEhC,EAEO8J,EAAAA,UAAAA,oBAAR,SAA4BxH,EAAcD,GAA1C,WACI,OAAQC,GACJ,IAAK,QACGnB,KAAK+Q,SACL/Q,KAAK+Q,QAAQ7P,GAEjB,MACJ,IAAK,QACGlB,KAAK0C,SACL1C,KAAK0C,QAAQxB,GAEjB,MACJ,IAAK,UACGlB,KAAK3B,WACL2B,KAAK3B,UAAU6C,GAEnB,MACJ,IAAK,OACGlB,KAAKnC,QACLmC,KAAKnC,OAAOqD,GAEhB,MACJ,IAAK,OACGlB,KAAKgR,QACLhR,KAAKgR,OAAO9P,GAEhB,MACJ,IAAK,SACGlB,KAAKiR,UACLjR,KAAKiR,SAAS/P,GAS1B,OALIC,KAAQnB,KAAK4R,WACb5R,KAAK4R,UAAUzQ,GACV2T,QACA7W,SAAQ,SAAAuJ,GAAY,SAAKuN,aAAavN,EAAUtG,EAAM,KAEvDA,IAAWA,EAAgB8T,gBACtC,EAEOrM,EAAAA,UAAAA,aAAR,SACInB,EACAtG,GAEwB,oBAAbsG,EACPA,EAASyN,KAAKjV,KAAMkB,GAEpBsG,EAAS0N,YAAYD,KAAKjV,KAAMkB,EAEvC,EAEOyH,EAAAA,UAAAA,SAAR,SAAiBxJ,GACTa,KAAK8Q,QAAQqE,OAEbxV,QAAQ0C,IAAIlD,EAEnB,EAEOwJ,EAAAA,UAAAA,kCAAR,WACY,IAiCGyM,EAjCHxB,EAAA,aAAAA,qBACR,MAAO,6BAA6BA,EAAoB,KAgC7CwB,EA/BP,WAgCK,IA/BLxB,EA+BSwB,EAAOA,EAAC,KA9BpB,yBACJ,EA5bsBzM,EAAAA,gBAAqC,CACxD6K,kBAAmB,IACnBN,eAAgB,IAChBiC,OAAO,EACPd,kBAAmB,IACnBC,kBAAmB,IACnBV,qBAAsBvP,OAAOgR,kBAC7Bd,uBAAwB,IACxBV,gBAAiB,WAAM,QAAI,EAC3BzL,mBAAevJ,GAGI8J,EAAAA,WAAa,EACbA,EAAAA,KAAO,EACPA,EAAAA,QAAU,EACVA,EAAAA,OAAS,EA8apC,CAAC,CA9bD,GAgcA,SAASmJ,EAAoBhB,GACzB,IAAMtS,EAAc,CAAC,EAQrB,OAPAV,OAAOC,KAAK4K,EAAgB2M,iBAAiBrX,SAAQ,SAAA6I,GACjD,IAAM3G,EAAS2Q,EAAgBhK,GAC/BtI,EAAOsI,QACOjI,IAAVsB,EACOwI,EAAgB2M,gBAAwBxO,GACzC3G,CACb,IACM3B,CACV,CAmBD,SAASmN,IAER,C,IA/doBhD,C,wBCjCrB,IAAI4M,EACJ,GAA0B,kBAAf/E,WACV+E,EAAc/E,gBAEd,IACC+E,EAAcvM,EAAQ,MAKtB,CAJC,MAAOlM,GACR,CAHD,QAKC,GADKyY,GAAiC,qBAAXlF,SAA0BkF,EAAclF,SAC9DkF,EAAe,MAAM,IAAI1Y,MAAM,kCACpC,CAGF,IAAI2Y,EAAkBD,EAAY3Y,WAAa2Y,EAAYE,aACvDC,EAAoB1M,EAAQ,OAMhC,SAAS2M,EAAaC,EAAK/D,GAiB1B,OAdIA,EACe,IAAI2D,EAAgBI,EAAK/D,GAGzB,IAAI2D,EAAgBI,EAWvC,CACGJ,GACH,CAAC,aAAc,OAAQ,UAAW,UAAUvX,SAAQ,SAAS4X,GAC5D/X,OAAO2S,eAAekF,EAAcE,EAAM,CACzChM,IAAK,WAAa,OAAO2L,EAAgBK,EAAQ,GAElD,IAMFvF,EAAOC,QAAU,CACb,aAAiBiF,EAAkBG,EAAe,KAClD,QAAiBD,E,wBCpDrBpF,EAAOC,QAAU,EAAjBD,OAAAA,O","sources":["../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","../node_modules/alchemy-sdk/src/internal/internal-types.ts","../node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","../node_modules/es5-ext/global.js","../node_modules/sturdy-websocket/src/index.ts","../node_modules/websocket/lib/browser.js","../node_modules/websocket/lib/version.js"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","import { fromHex, toHex } from '../api/util';\nimport { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: just fire off each send() separately since we're no longer batching:\n    // TODO: handle errors\n    const batchedBlockHeads = await this.provider.sendBatch(batchParts);\n    const blockHeads = batchedBlockHeads.reduce(\n      (acc, batch) => acc.concat(batch),\n      []\n    );\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import {\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent\n} from './websocket-backfiller';\nimport { EventType, Filter, Listener } from '@ethersproject/abstract-provider';\n\n/** This file contains internal types used by the SDK and are not exposed to the end user. */\n\ntype JsonRpcId = string | number | null;\n\n/**\n * Prefix for `alchemy_pendingTransactions` subscriptions when serializing to\n * ethers events.\n */\nexport const ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE =\n  'alchemy-pending-transactions';\n\nexport interface JsonRpcRequest {\n  jsonrpc: '2.0';\n  method: string;\n  params?: any[];\n  id?: JsonRpcId;\n}\n\nexport interface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\nexport interface JsonRpcResponse<T = any> {\n  jsonrpc: '2.0';\n  result?: T;\n  error?: JsonRpcError;\n  id: JsonRpcId;\n}\n\ninterface JsonRpcError<T = any> {\n  code: number;\n  message: string;\n  data?: T;\n}\n\nexport interface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\nexport interface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\nexport type WebSocketMessage = SingleOrBatchResponse | SubscriptionEvent;\nexport type SingleOrBatchResponse = JsonRpcResponse | JsonRpcResponse[];\n\n/**\n * DO NOT MODIFY.\n *\n * Event class copied directly over from ethers.js's `BaseProvider` class.\n *\n * This class is used to represent events and their corresponding listeners. The\n * SDK needs to extend this class in order to support Alchemy's custom\n * Subscription API types. The original class is not exported by ethers. Minimal\n * changes have been made in order to get TS to compile.\n */\nexport class Event {\n  readonly listener: Listener;\n  readonly once: boolean;\n  readonly tag: string;\n\n  _lastBlockNumber: number;\n  _inflight: boolean;\n\n  constructor(tag: string, listener: Listener, once: boolean) {\n    this.listener = listener;\n    this.tag = tag;\n    this.once = once;\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  get event(): EventType {\n    switch (this.type) {\n      case 'tx':\n        return this.hash!;\n      case 'filter':\n        return this.filter!;\n      default:\n        return this.tag;\n    }\n  }\n\n  get type(): string {\n    return this.tag.split(':')[0];\n  }\n\n  get hash(): string {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'tx') {\n      throw new Error('Not a transaction event');\n    }\n    return comps[1];\n  }\n\n  get filter(): Filter {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'filter') {\n      throw new Error('Not a transaction event');\n    }\n    const address = comps[1];\n\n    const topics = deserializeTopics(comps[2]);\n    const filter: Filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== '*') {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable(): boolean {\n    const PollableEvents = ['block', 'network', 'pending', 'poll'];\n    return this.tag.indexOf(':') >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n\n/**\n * Wrapper class around the ethers `Event` class in order to add support for\n * Alchemy's custom subscriptions types.\n *\n * The getters on this class deserialize the event tag generated by\n * {@link getAlchemyEventTag} into the original fields passed into the event.\n */\nexport class EthersEvent extends Event {\n  /**\n   * Converts the event tag into the original `fromAddress` field in\n   * {@link AlchemyPendingTransactionsEventFilter}.\n   */\n  get fromAddress(): string | string[] | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Converts the event tag into the original `toAddress` field in\n   * {@link AlchemyPendingTransactionsEventFilter}.\n   */\n  get toAddress(): string | string[] | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return deserializeAddressField(comps[2]);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Converts the event tag into the original `hashesOnly` field in\n   * {@link AlchemyPendingTransactionsEventFilter}.\n   */\n  get hashesOnly(): boolean | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[3] && comps[3] !== '*') {\n      return comps[3] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n}\n\nexport interface SubscriptionEvent<T = any> {\n  jsonrpc: '2.0';\n  method: 'eth_subscription';\n  params: {\n    subscription: string;\n    result: T;\n  };\n}\n\nfunction deserializeTopics(data: string): any {\n  if (data === '') {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === '') {\n      return [];\n    }\n\n    const comps = topic.split('|').map(topic => {\n      return topic === 'null' ? null : topic;\n    });\n\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction deserializeAddressField(data: string): string | string[] | undefined {\n  if (data === '') {\n    return undefined;\n  }\n\n  const addresses = data.split('|');\n  return addresses.length === 1 ? addresses[0] : addresses;\n}\n","import { BigNumber } from '@ethersproject/bignumber';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { Listener } from '@ethersproject/abstract-provider';\nimport {\n  AlchemyEventType,\n  AlchemyPendingTransactionsEventFilter\n} from '../types/types';\nimport {\n  BatchPart,\n  dedupeLogs,\n  dedupeNewHeads,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  throwIfCancelled,\n  WebsocketBackfiller\n} from '../internal/websocket-backfiller';\nimport { fromHex } from './util';\nimport SturdyWebSocket from 'sturdy-websocket';\nimport { VERSION } from '../version';\nimport {\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  EthersEvent,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  LogsSubscription,\n  NewHeadsSubscription,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  VirtualSubscription,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\nimport { AlchemyConfig } from './alchemy-config';\nimport {\n  getNetwork as getNetworkFromEthers,\n  Networkish\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [\n      ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n      'block',\n      'filter'\n    ];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    const response = await this.sendBatchConcurrently(payload);\n    const errorResponse = response.find(r => !!r.error);\n    if (errorResponse) {\n      throw new Error(errorResponse.error!.message);\n    }\n    // The ids are ascending numbers because that's what Payload Factories do.\n    return response\n      .sort((r1, r2) => (r1.id as number) - (r2.id as number))\n      .map(r => r.result);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(\n          e => e.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE\n        ).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<JsonRpcResponse[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        ['alchemy_pendingTransactions', { fromAddress, toAddress, hashesOnly }],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        const { fromAddress, toAddress, hashesOnly } = event;\n        return result =>\n          this.emit(\n            {\n              method: 'alchemy_pendingTransactions',\n              fromAddress,\n              toAddress,\n              hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n\nfunction isAlchemyEvent(\n  event: AlchemyEventType\n): event is AlchemyPendingTransactionsEventFilter {\n  return typeof event === 'object' && 'method' in event;\n}\n\n/**\n * Creates a string representation of an `alchemy_pendingTransaction`\n * subscription filter that is compatible with the ethers implementation of\n * `getEventTag()`. The method is not an exported function in ethers, which is\n * why the SDK has its own implementation.\n *\n * The event tag is then deserialized by the SDK's {@link EthersEvent} getters.\n *\n * @example\n *   ```js\n *   // Returns 'alchemy-pending-transactions:0xABC:0xDEF|0xGHI:true'\n *   const eventTag =  getAlchemyEventTag(\n *   {\n *     \"method\": \"alchemy_pendingTransaction\",\n *     \"fromAddress\": \"0xABC\",\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\n *     \"hashesOnly: true\n *   });\n *   ```;\n *\n * @param event\n * @internal\n */\nexport function getAlchemyEventTag(event: AlchemyEventType): string {\n  if (!isAlchemyEvent(event)) {\n    throw new Error('Event tag requires AlchemyEventType');\n  }\n  const fromAddress = serializeAddressField(event.fromAddress);\n  const toAddress = serializeAddressField(event.toAddress);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return (\n    ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE +\n    ':' +\n    fromAddress +\n    ':' +\n    toAddress +\n    ':' +\n    hashesOnly\n  );\n}\n\nfunction serializeAddressField(\n  field: string | Array<string> | undefined\n): string {\n  if (field === undefined) {\n    return '*';\n  } else if (Array.isArray(field)) {\n    return field.join('|');\n  } else {\n    return field;\n  }\n}\n\nfunction serializeBooleanField(field: boolean | undefined): string | undefined {\n  if (field === undefined) {\n    return '*';\n  } else {\n    return field.toString();\n  }\n}\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["WS","WebSocket","Error","error","logger","Logger","version","throwError","operation","NextId","WebSocketProvider","url","network","_pollingInterval","_wsReady","defineReadOnly","connection","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","this","_websocket","_detectNetwork","value","blockNumber","rid","Promise","resolve","reject","stringify","jsonrpc","tag","param","subIdPromise","_subIds","all","then","subId","event","type","_subscribe","BigNumber","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","length","listenerCount","readyState","CONNECTING","onerror","close","JsonRpcProvider","WebsocketBackfiller","maxBackfillBlocks","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","getBlockNumber","toBlockNumber","getHeadEventsInRange","Math","max","lastSeenBlockNumber","fromHex","minBlockNumber","getReorgHeads","reorgHeads","intermediateHeads","previousLogs","getLogsInRange","getCommonAncestor","commonAncestor","removedLogs","map","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","newMax","blockNumberHex","toBlockExclusive","batchParts","i","push","toHex","sendBatch","batchedBlockHeads","blockHeads","reduce","acc","batch","concat","toNewHeadsEvent","oldEvent","getBlockByNumber","blockHead","reverse","oldLog","blockHash","rangeFilter","fromBlock","toBlock","head","totalDifficulty","transactions","uncles","dedupeNewHeads","events","dedupe","dedupeLogs","items","getKey","keysSeen","Set","item","key","has","add","CANCELLED","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","EthersEvent","comps","split","deserializeAddressField","Event","listener","once","_lastBlockNumber","_inflight","address","topics","topic","deserializeTopics","indexOf","addresses","AlchemyWebSocketProvider","config","wsConstructor","apiKey","AlchemyProvider","alchemyNetwork","protocol","VERSION","ws","SturdyWebSocket","_a","process","versions","node","require","ethersNetwork","EthersNetwork","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","Array","isArray","isResponse","isSubscriptionEvent","physicalId","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","handleReopen","clear","cancelled","cancel","makeCancelToken","cancelBackfill","values","__awaiter","resubscribeAndBackfill","startHeartbeat","stopHeartbeatAndBackfill","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","eventName","_addEventListener","isAlchemyEvent","_off","_removeAllListeners","_listenerCount","_listeners","getAlchemyEventTag","_startEvent","includes","customStartEvent","startingBlockNumber","resolvedParams","set","sentEvents","args","stopped","eventTag","setTimeout","apply","_stopEvent","parts","nextId","sendBatchConcurrently","errorResponse","find","r","sort","r1","r2","removeSocketListeners","DEFAULT_ALCHEMY_API_KEY","addEventListener","removeEventListener","withBackoffRetries","withTimeout","getNewHeadsBackfill","backfillEvents","emitNewHeadsEvent","getLogsBackfill","emitLogsEvent","emitGenericEvent","emitProcessFn","emitFunction","reconnect","req","fromAddress","toAddress","hashesOnly","removeAllListeners","found","CustomNetworks","getNetworkFromEthers","f","retryCount","shouldRetry","nextWaitTime","delay","min","ms","promise","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","field","serializeAddressField","toString","join","naiveFallback","self","window","module","exports","globalThis","defineProperty","prototype","configurable","__global__","protocolsOrOptions","options","onclose","ondown","onreopen","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","listeners","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","reason","disposeSocket","shutdown","handleClose","dispatchEventOfType","l","connectTimeout","handleError","handleOpen","connectTimeoutId","_this","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","clearTimeout","slice","callListener","defaultPrevented","call","handleEvent","debug","s","POSITIVE_INFINITY","DEFAULT_OPTIONS","_globalThis","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop"],"sourceRoot":""}